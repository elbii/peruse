{"name":"Peruse","tagline":"Human-friendly query language for Elasticsearch","body":"Note: Plunk has been renamed to Peruse\r\n\r\nPeruse\r\n======\r\n\r\nHuman-friendly query language for Elasticsearch\r\n\r\n## About\r\n\r\nPeruse is a ruby gem to take a human-friendly, one-line search command and\r\ntranslate it to full-fledged JSON to send to Elasticsearch. Currently it only\r\nsupports a few commands, but the goal is to support a large subset of what\r\nElasticsearch offers.\r\n\r\n## Installation\r\n```\r\ngem install peruse\r\n```\r\n\r\nPeruse uses [Parslet](https://github.com/kschiess/parslet) to first parse your\r\nquery, and then [Elasticsearch's official ruby library](https://github.com/elasticsearch/elasticsearch-ruby)\r\nto send it to Elasticsearch.\r\n\r\n## Usage\r\n```ruby\r\nrequire 'peruse'\r\n\r\n# \r\n# Configuration is required before using Peruse\r\n# \r\n# Elasticsearch_options accepts the same params as Elasticsearch::Client\r\n# from the elasticsearch-ruby library\r\nPeruse.configure do |config|\r\n  config.elasticsearch_options = { host: 'localhost' }\r\nend\r\n\r\n# Restrict timeframe to last 1 week and match documents with _type=syslog\r\n# s = seconds\r\n# m = minutes\r\n# h = hours\r\n# d = days\r\n# w = weeks\r\n# All times in Peruse are converted to UTC\r\nPeruse.search 'last 1w AND _type = syslog'\r\n\r\n# The ```window``` command can also be used to filter by time\r\nPeruse.search 'window -2d to -1d'\r\n\r\n# Peruse tries to parse the date with Chronic, so this works too. Note the\r\n# double quotes around the time string. This is needed if it contains a space.\r\nPeruse.search 'window \"last monday\" to \"last thursday\"'\r\n\r\n# Of course, absolute dates are supported as well. Date format is American style\r\n# e.g. MM/DD/YY\r\nPeruse.search 'window 3/14/12 to 3/15/12'\r\n\r\n# Use double quotes to wrap space-containing strings\r\nPeruse.search 'http.header = \"UserAgent: Mozilla/5.0\"'\r\n\r\n# Commands are joined using parenthesized booleans\r\nPeruse.search '(last 1h AND severity = 5) OR (last 1w AND severity = 3)'\r\n\r\n# \"AND\" is aliased to \"and\" and \"&\". Similarly, \"OR\" is aliased to \"or\" and \"|\".\r\n# The following queries are identical to one above\r\nPeruse.search '(last 1h and severity = 5) or (last 1w and severity = 3)'\r\nPeruse.search '(last 1h & severity = 5) | (last 1w & severity = 3)'\r\n\r\n# Use the NOT keyword to negate the following command or boolean chain\r\nPeruse.search 'NOT message = Error'\r\n\r\n# Like AND and OR, \"NOT\" is aliased to \"not\" and \"~\"\r\nPeruse.search 'not message = Error'\r\nPeruse.search '~ message = Error'\r\n\r\n# Regexp is supported as well\r\nPeruse.search 'http.headers = /.*User-Agent: Mozilla.*/ OR http.headers = /.*application\\/json.*/'\r\n```\r\n\r\n\r\n## Translation\r\n\r\nUnder the hood, Peruse takes your query and translates it to\r\nElasticsearch-compatible JSON. For example,\r\n\r\n```last 24h & _type=syslog```\r\n\r\ngets translated to:\r\n\r\n```json\r\n{\r\n  \"query\": {\r\n    \"filtered\": {\r\n      \"filter\": {\r\n        \"and\": [\r\n          {\r\n            \"range\": {\r\n              \"timestamp\": {\r\n                \"gte\": \"2013-08-23T05:43:13.770Z\",\r\n                \"lte\": \"2013-08-24T05:43:13.770Z\"\r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"query\": {\r\n              \"query_string\": {\r\n                \"query\": \"_type:syslog\"\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn general, commands are combined into a single filter using Elasticsearch's,\r\n```and```, ```or```, and ```not``` filters.\r\n","google":"UA-18390529-5","note":"Don't delete this file! It's used internally to help with page regeneration."}